<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_PROFILE" elementType="Argument">
            <stringProp name="Argument.name">TEST_PROFILE</stringProp>
            <stringProp name="Argument.value">${__P(TEST_PROFILE, Default)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1505573702000</longProp>
        <longProp name="ThreadGroup.end_time">1505573702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Profile" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">${TEST_PROFILE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Default" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">1ba7b1e0-f17e-4609-858e-0dc17a7e3cac</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	100],
    [&quot;Authenticated Users&quot;,   0],
    [&quot;Search&quot;,   			0],
    [&quot;Cart&quot;,   			0],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Nomal Traffic" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">d8d0ac50-91c7-4068-84ed-67f214c27f50</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	40],
    [&quot;Authenticated Users&quot;,   30],
    [&quot;Search&quot;,   			20],
    [&quot;Cart&quot;,   			10],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Big Deal" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">6f31bc59-6112-42b1-a654-505a957d5e30</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	 5],
    [&quot;Authenticated Users&quot;,   10],
    [&quot;Search&quot;,   			15],
    [&quot;Cart&quot;,   			70],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Campaign" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">70c44b4f-38fb-4f5e-afea-43eab4ccfad2</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	20],
    [&quot;Authenticated Users&quot;,   15],
    [&quot;Search&quot;,   			35],
    [&quot;Cart&quot;,   			30],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random main action" enabled="true">
              <stringProp name="cacheKey">4fa6d98f-5933-4f27-978a-eb8c11a278cf</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def profileSource = vars.getObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;)

for (method in profileSource) {
    log.info(&quot;Model: &quot; + method[0].toString() + &quot; &quot; + method[1].toString());
    props.put(method[0].toString(), method[1].toString());
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions Before" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - FunctionUtils" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">d3e46b0f-3eed-41de-861f-7f0027004cca</stringProp>
              <stringProp name="script">class FunctionUtils {
    def generator(String alphabet, int length) {
        new Random().with { (1..length).collect { alphabet[nextInt(alphabet.length())] }.join() }
    }

    def randomNumber(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator((&apos;0&apos;..&apos;9&apos;).join(), length))
    }

    def randomString(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator(((&apos;A&apos;..&apos;Z&apos;)+(&apos;a&apos;..&apos;z&apos;)+(&apos;0&apos;..&apos;9&apos;)).join(), length))
    }

    def randomWord(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.randomString(new Random().nextInt(length)))
    }

    def randomSentence(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomWord(15) }.join(&quot; &quot;) })
    }

    def randomParagraph(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomSentence(15) + &quot;.&quot; }.join(&quot; &quot;) })
    }

    def rangeNumber(int min, int max) {
        Math.abs(new Random().nextInt(max - min + 1) + min)
    }

    def randomItem(List list) {
        list[new Random().nextInt(list.size())]
    }
}

vars.putObject(&quot;FUNCTION_UTILS&quot;, new FunctionUtils());
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions" enabled="true"/>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Anonymous Users" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Anonymous Users,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Anonymous users browsing website" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">b2a57c05-31a7-4821-aae0-7f6fbd9fa635</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def FuntionUtils = vars.getObject(&quot;FUNCTION_UTILS&quot;)

log.info &apos;randomNumber: &apos; 	+ FuntionUtils.randomNumber(10)
log.info &apos;randomString: &apos; 	+ FuntionUtils.randomString(10)
log.info &apos;randomWord: &apos; 		+ FuntionUtils.randomWord(10)
log.info &apos;randomSentence: &apos; 	+ FuntionUtils.randomSentence(10)
log.info &apos;randomParagraph: &apos; 	+ FuntionUtils.randomParagraph(3)
log.info &apos;rangeNumber: &apos; 	+ FuntionUtils.rangeNumber(1,100)

def items = [&quot;mouse&quot;, &quot;desktop&quot;, &quot;laptop&quot;, &quot;headphone&quot;, &quot;keyboard&quot;, &quot;monitor&quot;, &quot;cpu&quot;]
log.info &quot;randomItem: &quot; + FuntionUtils.randomItem(items)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Authenticated Users" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Authenticated Users,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Authenticated users browsing website" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Search" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Search,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Search Items" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Cart" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Cart,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Manipulating the shopping cart" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1506242645000</longProp>
        <longProp name="ThreadGroup.end_time">1506242645000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions Before" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - FunctionUtils" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">d3e46b0f-3eed-41de-861f-7f0027004cca</stringProp>
              <stringProp name="script">class FunctionUtils {
    def generator(String alphabet, int length) {
        new Random().with { (1..length).collect { alphabet[nextInt(alphabet.length())] }.join() }
    }

    def randomNumber(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator((&apos;0&apos;..&apos;9&apos;).join(), length))
    }

    def randomString(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator(((&apos;A&apos;..&apos;Z&apos;)+(&apos;a&apos;..&apos;z&apos;)+(&apos;0&apos;..&apos;9&apos;)).join(), length))
    }

    def randomWord(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.randomString(new Random().nextInt(length)))
    }

    def randomSentence(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomWord(15) }.join(&quot; &quot;) })
    }

    def randomParagraph(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomSentence(15) + &quot;.&quot; }.join(&quot; &quot;) })
    }

    def rangeNumber(int min, int max) {
        Math.abs(new Random().nextInt(max - min + 1) + min)
    }

    def randomItem(List list) {
        list[new Random().nextInt(list.size())]
    }
}

vars.putObject(&quot;FUNCTION_UTILS&quot;, new FunctionUtils());
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Object + array" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">def simple_object = [
	name : &apos;Tom&apos;,
	age	: 30,
	city	: &quot;Ho Chi Minh&quot;
]

simple_object &lt;&lt; [gender: &quot;male&quot;]

def simple_array = [
	hobbies: [
		&quot;music&quot;,
		&quot;footbal&quot;,
		&quot;movies&quot;
	]
]

simple_array.hobbies &lt;&lt; &quot;items&quot;

simple_object &lt;&lt; simple_array

def json = new groovy.json.JsonBuilder(simple_object);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Object 1" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">def simple_object = [
	name : &apos;Tom&apos;,
	age	: 30,
	city	: &quot;Ho Chi Minh&quot;
]

simple_object &lt;&lt; [gender: &quot;male&quot;]

//def hobblies

def simple_array = [
	hobbies: [
		&quot;music&quot;,
		&quot;footbal&quot;,
		&quot;movies&quot;
	]
]

simple_array.hobbies &lt;&lt; &quot;items&quot;

simple_object &lt;&lt; simple_array

def json = new groovy.json.JsonBuilder(simple_object);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Object + array - dang lam" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper


String jsonString = &quot;&quot;&quot;
  {
   &quot;Success&quot;: true,
   &quot;TotalRecords&quot;: 41,
   &quot;RoomSearchResult&quot;:    [
            {
         &quot;ResourceItemID&quot;: 2290,
         &quot;Name&quot;: &quot;Room 23 (L02)&quot;,
         &quot;LocationId&quot;: 7,
         &quot;GroupID&quot;: 518,
         &quot;FloorID&quot;: 2,
         &quot;DefaultCapacity&quot;: 4,
         &quot;CanBeBooked&quot;: true
      },
      {
         &quot;ResourceItemID&quot;: 2063,
         &quot;Name&quot;: &quot;Room 15 (L10)&quot;,
         &quot;LocationId&quot;: 7,
         &quot;GroupID&quot;: 518,
         &quot;FloorID&quot;: 10,
         &quot;DefaultCapacity&quot;: 8,
         &quot;CanBeBooked&quot;: true
      }
   ],
   &quot;Error&quot;:    {
      &quot;ErrorCode&quot;: 0,
      &quot;ErrorDescription&quot;: &quot;&quot;
   }
}
&quot;&quot;&quot;
def json = new JsonSlurper().parseText(jsonString)
log.info &quot;ResourceItemID : &quot; + json.&quot;RoomSearchResult&quot;[1].&quot;ResourceItemID&quot;
//log.info &quot;ResourceItemID : &quot; + json.&quot;RoomSearchResult&quot;[?(@.&quot;FloorID&quot; = 10)].&quot;ResourceItemID&quot;
// $.store.book[?(@.price &lt; 10)].title


</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Object + array - dang lam" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script"></stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Bai tap 2" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper


String jsonString = &quot;&quot;&quot;
{
   &quot;store&quot;:{
      &quot;book&quot;:[
         {
            &quot;category&quot;:&quot;reference&quot;,
            &quot;author&quot;:&quot;Nigel Rees&quot;,
            &quot;title&quot;:&quot;Sayings of the Century&quot;,
            &quot;price&quot;:8.95
         },
         {
            &quot;category&quot;:&quot;fiction&quot;,
            &quot;author&quot;:&quot;Evelyn Waugh&quot;,
            &quot;title&quot;:&quot;Sword of Honour&quot;,
            &quot;price&quot;:12.99
         },
         {
            &quot;category&quot;:&quot;fiction&quot;,
            &quot;author&quot;:&quot;Herman Melville&quot;,
            &quot;title&quot;:&quot;Moby Dick&quot;,
            &quot;isbn&quot;:&quot;0-553-21311-3&quot;,
            &quot;price&quot;:8.99
         },
         {
            &quot;category&quot;:&quot;fiction&quot;,
            &quot;author&quot;:&quot;J. R. R. Tolkien&quot;,
            &quot;title&quot;:&quot;The Lord of the Rings&quot;,
            &quot;isbn&quot;:&quot;0-395-19395-8&quot;,
            &quot;price&quot;:22.99
         }
      ],
      &quot;bicycle&quot;:{
         &quot;color&quot;:&quot;red&quot;,
         &quot;price&quot;:19.95
      }
   },
   &quot;expensive&quot;:10
}
&quot;&quot;&quot;
def json = new JsonSlurper().parseText(jsonString)
log.info &quot;*************************************&quot;
//log.info &quot;Book&apos;s Title [1] : &quot; + json.&quot;store&quot;.&quot;book&quot;[1]
log.info &quot;Book&apos;s Title [1] : &quot; + json.&quot;store&quot;.&quot;book&quot;[*]


//log.info &quot;Book&apos;s Title [1] : &quot; + json.&quot;store&quot;.&quot;book&quot;[1].&quot;title&quot;
//def jsonSmallThan10 = json.store.&quot;book&quot; //[?(@.price &lt; 10)].&quot;title&quot;;
//$.store.book[?(@.price &lt; 10)].title

//$.store.book[?(@.price &lt; 10)].title
log.info &quot;*************************************&quot;








</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Object" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">def simple_object = [
	name : &apos;Tom&apos;,
	age	: 30,
	city	: &quot;Ho Chi Minh&quot;
]

simple_object &lt;&lt; [gender: &quot;male&quot;]  // add item to an object

//def jsonjson = new groovy.json.JsonBuilder(simple_object);

//log.info groovy.json.JsonOutput.prettyPrint(json.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Array" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">def simple_array = [
	hobbies: [
		&quot;music&quot;,
		&quot;footbal&quot;,
		&quot;movies&quot;
	]
]



simple_array.hobbies &lt;&lt; &quot;items&quot;  // add item to an array

def json = new groovy.json.JsonBuilder(simple_array);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="groovy Array" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="script">def FuntionUtils = vars.getObject(&quot;FUNCTION_UTILS&quot;)

log.info &apos;randomNumber: &apos; 	+ FuntionUtils.randomNumber(10)
log.info &apos;randomString: &apos; 	+ FuntionUtils.randomString(10)
log.info &apos;randomWord: &apos; 		+ FuntionUtils.randomWord(10)
log.info &apos;randomSentence: &apos; 	+ FuntionUtils.randomSentence(10)
log.info &apos;randomParagraph: &apos; 	+ FuntionUtils.randomParagraph(3)
log.info &apos;rangeNumber: &apos; 	+ FuntionUtils.rangeNumber(1,100)

def account = 
[
	name: FuntionUtils.randomString(10),
	age: FuntionUtils.rangeNumber(20,50),
	isMarriage: true,
	hasChild: false,
	hobbies: [
		&quot;music&quot;,
		&quot;footbal&quot;,
		&quot;movies&quot; 
	],
	information: [
		hasOwnHouse: true,
		locations: [
			[
				type: &quot;Company&quot;,
				address: FuntionUtils.randomSentence(10)
			],
			[
				type: &quot;Home&quot;,
				address: FuntionUtils.randomSentence(10)
			]
		],
		contact: [
			phone: [
				[
					type: &quot;Home&quot;,
					number: FuntionUtils.randomNumber(10)
				],
				[
					type: &quot;Mobile&quot;,
					number: FuntionUtils.randomNumber(10)
				]
			],
			emails: [
				// FuntionUtils.randomString(10) + &quot;@&quot; + FuntionUtils.randomString(10).com,
				//FuntionUtils.randomString(10) + &quot;@&quot; +  FuntionUtils.randomString(10).com
			]
		]
	]
]



def json = new groovy.json.JsonBuilder(account);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
